import requests
from pprint import pprint
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin
import argparse
import logging
import random
import string

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')


def get_all_forms(url):
    """Given a `url`, it returns all forms from the HTML content"""
    try:
        soup = bs(requests.get(url).content, "html.parser")
        return soup.find_all("form")
    except requests.RequestException as e:
        logging.error(f"Error fetching URL {url}: {e}")
        return []


def get_form_details(form):
    """Extracts all possible useful information about an HTML `form`"""
    details = {
        "action": form.attrs.get("action", "").lower(),
        "method": form.attrs.get("method", "get").lower(),
        "inputs": []
    }
    for input_tag in form.find_all(["input", "textarea", "select"]):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        details["inputs"].append({"type": input_type, "name": input_name})
    return details


def submit_form(form_details, url, value):
    """Submits a form given in `form_details`"""
    target_url = urljoin(url, form_details["action"])
    data = {}
    for input in form_details["inputs"]:
        if input["type"] in ["text", "search", "textarea"]:
            input["value"] = value
        elif input["type"] == "select":
            input["value"] = input.get("name")
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            data[input_name] = input_value

    logging.info(f"Submitting payload to {target_url}")
    logging.debug(f"Data: {data}")
    try:
        if form_details["method"] == "post":
            return requests.post(target_url, data=data)
        else:
            return requests.get(target_url, params=data)
    except requests.RequestException as e:
        logging.error(f"Error submitting form to {target_url}: {e}")
        return None


def scan_xss(url):
    """Prints all XSS vulnerable forms and returns True if any is vulnerable"""
    forms = get_all_forms(url)
    logging.info(f"Detected {len(forms)} forms on {url}.")
    
    payload = f"<script>alert('xss_{random.randint(1000,9999)}')</script>"
    is_vulnerable = False

    for form in forms:
        form_details = get_form_details(form)
        response = submit_form(form_details, url, payload)
        if response and payload in response.content.decode():
            logging.info(f"XSS Detected on {url}")
            logging.info(f"Form details:")
            pprint(form_details)
            is_vulnerable = True
    
    return is_vulnerable


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="XSS vulnerability scanner.")
    parser.add_argument("url", help="URL of the website to scan for XSS vulnerabilities")
    args = parser.parse_args()

    if scan_xss(args.url):
        logging.info("Vulnerable forms found.")
    else:
        logging.info("No vulnerable forms found.")
